#include <Wire.h>
#include <LiquidCrystal_I2C.h> //für Display
#include <Keypad.h> //für Tastenfeld
#include <Adafruit_MotorShield.h> //für Motor
#include "utility/Adafruit_MS_PWMServoDriver.h" //für Motor
#include <AccelStepper.h> //für Motor

//Variabel:
char LaengeHunderter = '_';
char LaengeZehner = '_';
char LaengeEiner = '_';
float Faserdurchmesser = 0; // in mm
int   Faserlaenge = 0;
//boolean LaengeEingegeben = false;
int Klick = 7;    // Klick als akustisches Feedback
float MaxSpeed=200; // oberer Motor //float MaxSpeed=5000.0; // oberer Motor
float kleinSpuleBreit = 3; // in cm
//float GrossSpuleBreit= 9.1; // in cm
float SchraubenumdrehungenProCm = 10; // (z.B.)
float RadiusKleines = 4.3;  // in cm
float UmdrehungenProBreit = SchraubenumdrehungenProCm * kleinSpuleBreit; 
//Serial.print(" UmdrehungenProBreit: ");
//Serial.println(UmdrehungenProBreit);
long Stepper2StepsToGo;
// Umdrehungen des unteren Motors (z.B. 6.5) tedad dorhaye ke pich mizane 30 tast

float Umfang = 2 * M_PI * RadiusKleines;    // in cm
bool active = false; // noch keine Bestellung
bool fertig = true;

//LCD:
LiquidCrystal_I2C lcd(0x3F, 16, 2); // Setzt die LCD-Addresse auf 0x3F (oder 0x27) Display mit 16 Zeichen 2 Zeilen

//Tastenfeld:
const byte ROWS = 4; //Hier wird die Größe des Tastenfelds definiert 4 Zeilen
const byte COLS = 4; //Hier wird die Größe des Tastenfelds definiert 4 Spalten
char keys[ROWS][COLS] = { //Die Ziffern/Zeichen des Tastenfelds
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {23, 25, 27, 29};  //Definition der Pins für die 4 Zeilen
byte colPins[COLS] = {31, 33, 35, 37};  //Definition der Pins für die 4 Spalten
char pressedKey;                        //pressedKey entspricht in Zukunft den gedrückten Tasten
Keypad myKeypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS ); //Das Keypad kann absofort mit myKeypad angesprochen werden

//MotorShield:
Adafruit_MotorShield AFMS = Adafruit_MotorShield();
Adafruit_StepperMotor *Stepper1 = AFMS.getStepper(200, 1);
Adafruit_StepperMotor *Stepper2 = AFMS.getStepper(200, 2);

int SchritteProUmdrehung1 =100;  // 100 bei DOUBLE, 200 bei SINGLE, 3200 bei MICROSTEP ...
void forwardstep1() {
  Stepper1->onestep(FORWARD,DOUBLE);
}
void backwardstep1() {
  Stepper1->onestep(BACKWARD,DOUBLE);
}

// wrappers for the second motor!
int SchritteProUmdrehung2 = 100;  // 100 bei DOUBLE, 200 bei SINGLE, 3200 bei MICROSTEP ...
void forwardstep2() {
  Stepper2->onestep(FORWARD,DOUBLE);
}
void backwardstep2() {
  Stepper2->onestep(BACKWARD,DOUBLE);
}

AccelStepper stepper1(forwardstep1, backwardstep1);
AccelStepper stepper2(forwardstep2, backwardstep2);


// Durchmesserfaser in cm
void bestellung(float meter,float Durchmesserfaser)
{
 
  int    WindungenProBreit= kleinSpuleBreit/Durchmesserfaser; // z.B. 52 (Umdrehungen des oberen Motors)/ 2.Motor 
  Serial.print("WindungenProBreit:  ");
  Serial.println (WindungenProBreit);
  
  float  Ratio= (WindungenProBreit/UmdrehungenProBreit); // Oberer Motor muss sich um diesen Faktor schneller drehen (z.B. 8)
  Serial.print("Ratio:  ");
  Serial.println(Ratio);
  
  // Entweder: quadratische Gleichung lösen:
  // meter = 2*pi*WindungenProBreit*(N*Radiuskleines+Durchmesserfaser*N*(N+1)/2)/100
  // oder:
  long umdrehungen = 0; // N
  float radius = RadiusKleines;
  while (1) {
    float umfang = 2 * M_PI * radius;
    float laengeProSchicht = umfang * WindungenProBreit / 100; // in metern
    if (meter < laengeProSchicht)
    {
      umdrehungen += ((meter * 100) / umfang);
      break;
    }
    umdrehungen += WindungenProBreit;
//    Serial.print("umdrehungen: "  );
//    Serial.println(umdrehungen);
  
    radius += Durchmesserfaser; // oder etwas weniger
    meter -= laengeProSchicht;
  }
  // oder vereinfacht:
//   long  umdrehungen = ((meter * 100) / Umfang)+1 ; // in  Umdrehungen (des oberen Motors)Umrechnung
//   Serial.print ("umdrehungen: "  );
//   Serial.println (umdrehungen);

  AFMS.begin();  // create with the default frequency 1.6KHz
  stepper1.setMaxSpeed(MaxSpeed/Ratio);
  Serial.print(" MaxSpeed/Ratio Stepper1 am Schreibe: ");
  Serial.println(MaxSpeed/Ratio);
  
  stepper1.setAcceleration(100.0);                              // oder 10 oder 1000 ?
  int steps1 = SchritteProUmdrehung1*UmdrehungenProBreit;       //umdrehungen; 
  stepper1.setCurrentPosition(-steps1/2);                         // -steps1/2 ?
  stepper1.moveTo(steps1/2);                                      // steps1/2 ?

  Serial.print("steps1: ");
  Serial.println(steps1/2);

  stepper2.setMaxSpeed(MaxSpeed);
  Serial.print("MaxSpeed Stepper2 an der Spule**:  ");
  Serial.println(MaxSpeed);

  stepper2.setAcceleration(100.0);

  Serial.print("SchritteProUmdrehung2:  "  );
  Serial.println(SchritteProUmdrehung2);

  Stepper2StepsToGo = (long) (SchritteProUmdrehung2 * umdrehungen);
  stepper2.moveTo (Stepper2StepsToGo);                    //(SchritteProUmdrehung2 * umdrehungen);
  
  Serial.print("umdrehungen: ");
  Serial.println(umdrehungen);
  
  Serial.print("SchritteProUmdrehung2 * umdrehungen: ");
  Serial.println( SchritteProUmdrehung2 * umdrehungen);

  //stepper2.moveTo(SchritteProUmdrechung2*Umrechnung);

  active = true;
  fertig = false;
}

void setup()
{
  Serial.begin(9600);
  pinMode(Klick, OUTPUT); // Pin 2 (Pin „Pieps“) ist ein Ausgang.
  lcd.begin(); // Initialisierung der LCD

  lcd.setCursor(0, 0);
  
  lcd.setCursor(0, 1);

  delay(5000);

  lcd.setCursor(0, 0);
  lcd.print("Durchm.:A=0.25mm");
  lcd.setCursor(0, 1);
  lcd.print("        B=0.17mm");
  Faserdurchmesser=0;
  LaengeHunderter = '_';
  LaengeZehner = '_';
  LaengeEiner = '_';

  // auf bestellung warten
  active = false;
  fertig = true;
}

void loopEingabe()
{
  pressedKey = myKeypad.getKey();
  if   (!pressedKey) {
    return;
  }

  digitalWrite(Klick, HIGH);
  delay(25);
  digitalWrite(Klick, LOW);
  
  
  if (Faserdurchmesser != 0)
  {
    if (LaengeHunderter == '_') //Hundertereingabe
    {
      LaengeHunderter = pressedKey;
      lcd.setCursor(8, 0);
      lcd.print(LaengeHunderter);

     // Serial.println("Hunderter gedrückt");
    }
    else
    {
      if (LaengeZehner == '_') //Zehnereingabe
      {
        LaengeZehner = pressedKey;
        lcd.setCursor(9, 0);
        lcd.print(LaengeZehner);
      }
      else
      {
        if (LaengeEiner == '_') //Einereingabe
        {
          LaengeEiner = pressedKey;
          lcd.setCursor(10, 0);
          lcd.print(LaengeEiner);
          lcd.setCursor(0, 1);
          lcd.print("Start:A  Reset:B");
        }
        else //Länge ist eingegeben
        {
          if (pressedKey == 'A' && Faserdurchmesser != 0) //Bestätigung der Längeneingabe
          {
            Faserlaenge = ((int)LaengeHunderter - 48) *100 + ((int)LaengeZehner - 48) * 10 + ((int)LaengeEiner - 48);
        
             Serial.print("int Faserlaenge in m.:");
             Serial.println(Faserlaenge); 
             
            bestellung(Faserlaenge,Faserdurchmesser/10);
            lcd.setCursor(0, 0);
            lcd.print("Bitte warten...");
          }
          if (pressedKey == 'B') //Reset der Längeneingabe
          {
            Serial.println("Reset: Längeneingabe gelöscht!");
            Faserdurchmesser = 0;
            LaengeHunderter = '_';
            LaengeZehner = '_';
            LaengeEiner = '_';
            lcd.setCursor(0, 0);
            lcd.print("Durchm.:A=0.25mm");
            lcd.setCursor(0, 1);
            lcd.print("        B=0.17mm");
            pressedKey = '0'; //damit keine Eingabe als Durchmesserwahl im nachfolgenden Schritt!!!
          }
        }
      }
    }
  }
  if (Faserdurchmesser == 0)
  {
    if (pressedKey == 'A')
    {
      Faserdurchmesser = 0.25;
      Serial.println("A gedrückt->Faserdurchmesser=0,25mm");
      Serial.println(Faserdurchmesser);
      lcd.setCursor(0, 0);
      lcd.print("Durchmesser:    ");
      lcd.setCursor(0, 1);
      lcd.print("0,25mm(standard)");
      delay(3000);
      lcd.setCursor(0, 0);
      lcd.print("Laenge: ");
      lcd.setCursor(8, 0);
      lcd.print(LaengeHunderter);
      lcd.setCursor(9, 0);
      lcd.print(LaengeZehner);
      lcd.setCursor(10, 0);
      lcd.print(LaengeEiner);
      lcd.setCursor(11, 0);
      lcd.print("Meter");
      lcd.setCursor(0, 1);
      lcd.print("Laenge eingeben!");
    
    }
     
    if (pressedKey == 'B')
    {
      Faserdurchmesser = 0.17;

      lcd.setCursor(0, 0);
      lcd.print("Durchmesser:    ");
      lcd.setCursor(0, 1);
      lcd.print("0,17mm (redClad)");
      delay(3000);
      lcd.setCursor(0, 0);
      lcd.print("Laenge: ");
      lcd.setCursor(8, 0);
      lcd.print(LaengeHunderter);
      lcd.setCursor(9, 0);
      lcd.print(LaengeZehner);
      lcd.setCursor(10, 0);
      lcd.print(LaengeEiner);
      lcd.setCursor(11, 0);
      lcd.print("Meter");
      lcd.setCursor(0, 1);
      lcd.print("Laenge eingeben!");
    }
  }
}
void loopMotors()
{
  // Richtung wechseln
  if ( (stepper1.distanceToGo() == 0) && (active) ){
    stepper1.moveTo(-stepper1.currentPosition());
  }
  if (stepper2.distanceToGo() == 0) {
    // anhalten und reset
    if (active) {
      active = false; // fährt aber noch bis zum Ende bzw. Anfang
      stepper1.moveTo(-abs(stepper1.targetPosition())); // an den Anfang fahren (nicht ans Ende)
 
      stepper1.setMaxSpeed(MaxSpeed);  
      
      Serial.print("sorate bargasht motor1: ");
      Serial.println(MaxSpeed); 
        
      stepper1.setAcceleration(1000.0);  // oder 10 oder 1000 ?
      stepper2.setCurrentPosition(0); 
    }
    else if (stepper1.distanceToGo() == 0)
    {
      // Serial.println("Ich bin fertig." );
      fertig = true;
      Stepper1->release();
      Stepper2->release();
      setup(); // neu anfangen
    }
  }
  stepper1.run();
  stepper2.run();
}
void loop()
{
  if (fertig) {
    loopEingabe();
  } else {
    loopMotors();
  }
}





